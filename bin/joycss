#!/usr/bin/env node

var configUser = require('./config').configUser;
var fs = require('fs');
var path = require('path');
var util = require('util');
var config = require('../lib/common/config');
var Log = require('../lib/common/log');
var version = config.system('version');

if (!config.joyrc('isPass')) {
  console.log();
  console.log("  Well come to joycss.");
  var check = require('../lib/check').checkAll();
  config.joyrc(null, check);
  return false;
}

var program = require("commander");

program.
  version(version).
  usage('[option] <file.css|file.less|file.scss ...>').
  option('-c, --close', 'use compact layout').
  option('-y, --vertical', 'vertical layout').
  option('-x, --horizontal', 'horizontal range').
  option('-a, --alpha', 'use png24[default use png8]').
  option('-s, --source', 'read file from .source.css').
  option('-p, --pipe', 'read cssText from pipe, ie lessc').
  option('-u, --upload', 'upload image in css to tbcdn[only for taobao]').
  option('--debug', 'show debug info').
  option('--config', 'config upload user name').
  option('--prefix [prefix]', 'config classname prefix').
  option('--dest [dest]', 'dest file path').
  option('--imgPath [image path]', 'image output path');

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ joycss xx.css');
  console.log('    $ joycss xx.less');
  console.log('    $ joycss xxx/');
  console.log('    $ joycss editor.less --dest build/editor.css --imgPath build/img');
  console.log('    $ lessc xx.less | joycss -p xx.css');
  console.log('');
  console.log('  joycss@%s %s', version, __filename);
  console.log('  Documentation can be found at http://joycss.org');
  console.log('');
});

program.parse(process.argv);

if(program.config) {
  // 配置taobao登陆用户名
  configUser();
  return;
}


if (program.debug) Log.DEBUG = true;

if (!program.args.length) {

  program.help();

} else {

  if (program.upload && !config.joyrc('upload')) {
    program.outputHelp();
    console.log('Error message: ');
    console.log('You ars using -u, --upload options\nPlease run joycss --config set up use name first');
    return;
  }

  var conf = {};

  if (program.upload) conf.uploadImgs = true;
  if (program.horizontal) conf.layout = 'horizontal';
  if (program.vertical) conf.layout = 'vertical';
  if (program.close) conf.layout = 'close';
  if (program.alpha) conf.force8bit = false;
  if (program.source) conf.source = true;
  if (program.nochange) conf.nochange = true;
  if (program.prefix) conf.prefix = program.prefix;

  var Joycss = require('../lib');
  var cwd = process.cwd();

  if (!conf.nochange) {
    conf.layout = conf.layout || 'auto';
    console.log('[option]use layout %s', conf.layout);
  }

  if (program.dest) {
    var dest = path.join(cwd, program.dest);
    var file = program.args[0];
    conf.imgPath = path.relative(path.dirname(file), path.dirname(program.dest));
  }

  if (program.imgPath) {
    conf.imgPath = program.imgPath;
  }

  if (conf.imgPath) {
    conf.relative = path.relative(path.dirname(dest),
        path.join(cwd, conf.imgPath)) || '.';
  }

  // 通过管道获取css字符串
  if (program.pipe) {

    console.log('read steam from pipe');
    var file = path.join(cwd, program.args[0]);
    readFromPipe(function(text){
      new Joycss(file, {global: conf}, text, dest);
    });

  } else {
    var Mult = Joycss.Mult;
    program.args.forEach(function(file){
      Mult.add([path.join(cwd, file), {global: conf}, null, dest], true);
    });
  }

}

function readFromPipe(callback){

  var stdin = '';

  process.stdin.resume();
  process.stdin.on('data', function (chunk) {
    stdin += chunk;
  });

  process.stdin.on('end', function (chunk) {
    callback(stdin);
  });
}

/**
 * vim: ft=javascript:tw=80:
 */
